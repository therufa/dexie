import type { inferRouterOutputs } from "@trpc/server";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";

import { api } from "../utils/api";
import type { CardRouter } from "../server/api/routers/card";
import { CardTiers, MinionTypes } from "../utils/metadata";

type LangKey =
  | "en_US"
  | "ja_JP"
  | "de_DE"
  | "fr_FR"
  | "es_ES"
  | "it_IT"
  | "pt_PT"
  | "ru_RU"
  | "ko_KR"
  | "zh_TW"
  | "zh_CN";
type Cards = inferRouterOutputs<CardRouter>["filter"];
type Card = Cards[0] & {
  image: Record<LangKey, string>;
  name: Record<LangKey, string>;
};

const Card = ({ card }: { card: Card }) => {
  return (
    <li className="flex flex-col items-center hover:bg-slate-200">
      <Image
        src={card.image.en_US}
        alt={card.slug}
        width={200}
        height={276.56}
      />
      <span>{card.name.en_US}</span>
    </li>
  );
};

type SectionFilter = {
  name: string;
  hero?: boolean;
  tier?: number;
  minionTypes?: number[];
};

const Section = ({
  title,
  filter,
}: {
  title: string;
  filter: SectionFilter;
}) => {
  const cardQuery = api.card.filter.useQuery<unknown, Card[]>(filter);

  if (cardQuery.data === undefined || cardQuery.data.length === 0) {
    return null;
  }

  return (
    <section className="m-2 md:m-5">
      <h2 className="bg-zinc-200 p-2 text-xl uppercase leading-10">{title}</h2>
      <ul className="grid grid-cols-2 gap-4 md:grid-cols-4 xl:grid-cols-6 2xl:grid-cols-8">
        {cardQuery.data?.map((card) => (
          <Card key={card.id} card={card} />
        ))}
      </ul>
    </section>
  );
};

const Home: NextPage = () => {
  const [name, setName] = useState("");
  const [showHero, setShowHero] = useState(true);
  const [minionTypes, setMinionTypes] = useState<number[] | undefined>(
    undefined
  );

  function updateMinionTypes(type: number) {
    if (minionTypes?.includes(type)) {
      setMinionTypes(minionTypes.filter((t) => t !== type));
    } else {
      setMinionTypes([...(minionTypes ?? []), type]);
    }
  }

  return (
    <>
      <Head>
        <title>Card Buddy for Hearthstone Battlegrounds</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <input value={name} onChange={(e) => setName(e.target.value)} />
        <label>
          <input
            checked={showHero}
            onChange={(e) => setShowHero(e.target.checked)}
            type="checkbox"
          />
          Hero
        </label>
        {Object.entries(MinionTypes).map(([key, value]) => (
          <label key={key}>
            <input
              checked={minionTypes?.includes(value) ?? false}
              onChange={() => updateMinionTypes(value)}
              type="checkbox"
            />
            {key}
          </label>
        ))}

        {showHero && (
          <Section
            key="Hero"
            title="Hero"
            filter={{ name, hero: true, minionTypes }}
          />
        )}

        {CardTiers.map(({ title, filter }) => (
          <Section
            key={title}
            title={title}
            filter={{ name, ...filter, minionTypes }}
          />
        ))}
      </main>
    </>
  );
};

export default Home;
